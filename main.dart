import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // Import Firestore

import 'screens/user_home.dart';
import 'screens/driver_home.dart';
// Assuming this is generated by flutterfire configure
import 'screens/role_selection_screen.dart'; // Your RoleSelectionScreen

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: FirebaseOptions(
      apiKey: "AIzaSyABZDxSnMBqihHEoipsChTcSPfJrJTo4-g",
      authDomain: "timepass-1897f.firebaseapp.com",
      projectId: "timepass-1897f",
      storageBucket: "timepass-1897f.appspot.com",
      messagingSenderId: "20855051000",
      appId: "1:20855051000:android:e40edc8786833119f3610d",
    ),
  );
  runApp(const EmerambuApp());
}

class EmerambuApp extends StatelessWidget {
  const EmerambuApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ambulance App',
      theme: ThemeData(primarySwatch: Colors.red),
      home:
          const AuthWrapper(), // Changed to AuthWrapper to handle initial routing
      debugShowCheckedModeBanner: false, // Hide debug banner
    );
  }
}

// AuthWrapper to switch between login/home screens based on authentication and role
class AuthWrapper extends StatefulWidget {
  const AuthWrapper({super.key});

  @override
  State<AuthWrapper> createState() => _AuthWrapperState();
}

class _AuthWrapperState extends State<AuthWrapper> {
  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance
          .authStateChanges(), // Listen to auth state changes
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        }

        final user = snapshot.data;

        if (user == null) {
          // No user logged in, show RoleSelectionScreen
          return const RoleSelectionScreen();
        } else {
          // User is logged in, now fetch their role from Firestore
          return StreamBuilder<DocumentSnapshot>(
            stream: FirebaseFirestore.instance
                .collection('users')
                .doc(user.uid)
                .snapshots(),
            builder: (context, userDocSnapshot) {
              if (userDocSnapshot.connectionState == ConnectionState.waiting) {
                return const Scaffold(
                  body: Center(child: CircularProgressIndicator()),
                );
              }

              if (userDocSnapshot.hasError) {
                return Scaffold(
                  body: Center(
                    child: Text(
                      'Error loading user role: ${userDocSnapshot.error}',
                    ),
                  ),
                );
              }

              // Default to user role if document or role field is missing
              String userRole = 'user';
              if (userDocSnapshot.hasData && userDocSnapshot.data!.exists) {
                final userData =
                    userDocSnapshot.data!.data() as Map<String, dynamic>?;
                if (userData != null && userData.containsKey('role')) {
                  userRole = userData['role'];
                }
              }

              // Route based on role
              if (userRole == 'driver') {
                return const DriverHome();
              } else {
                // Default or 'user' role
                return const UserHome();
              }
            },
          );
        }
      },
    );
  }
}
